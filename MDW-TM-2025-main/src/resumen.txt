EXPLICACI√ìN DE LA CARPETA SRC - BACKEND NODE.JS/EXPRESS
========================================================

ESTRUCTURA GENERAL:
-------------------
La carpeta src/ contiene todo el c√≥digo fuente del backend de la aplicaci√≥n.
Est√° organizada siguiendo el patr√≥n MVC (Modelo-Vista-Controlador) y separaci√≥n de responsabilidades.

ARCHIVOS Y CARPETAS:
====================

üìÑ index.ts
-----------
- ARCHIVO PRINCIPAL de la aplicaci√≥n.
- Configura Express, middlewares globales, rutas y conexi√≥n a MongoDB.
- Inicia el servidor en el puerto especificado en .env
- Conecta a MongoDB Atlas usando Mongoose.
- Define las rutas principales: /api/users y /api/products

üìÅ controllers/
---------------
Contiene la l√≥gica de negocio de la aplicaci√≥n.

‚Ä¢ userController.ts:
  - createUser: Crea usuarios con contrase√±a hasheada usando bcrypt
  - getUsers: Obtiene todos los usuarios
  - getUser: Obtiene un usuario por ID
  - updateUser: Actualiza datos de un usuario
  - deleteUser: Elimina un usuario
  - loginUser: Autentica usuario y devuelve JWT access/refresh tokens
  - refreshAccessToken: Genera nuevo access token usando refresh token

‚Ä¢ productController.ts:
  - getProducts: Devuelve lista de productos (simulada para testing)
  - Funciones b√°sicas para manejo de productos

üìÅ dto/
-------
Data Transfer Objects - Definen y validan la estructura de datos.

‚Ä¢ create-user.dto.ts:
  - Valida datos para crear usuarios
  - Campos: name, lastName, email, password, age
  - Usa decoradores de class-validator (@IsString, @IsEmail, etc.)

‚Ä¢ update-user.dto.ts:
  - Valida datos para actualizar usuarios
  - Todos los campos son opcionales (@IsOptional)

‚Ä¢ product.dto.ts:
  - Estructura para validar datos de productos
  - (Archivo creado pero puede estar vac√≠o o con validaciones b√°sicas)

üìÅ middleware/
--------------
Funciones que se ejecutan entre request y response.

‚Ä¢ auth.ts:
  - authenticateJWT: Middleware que valida tokens JWT
  - Verifica header Authorization: Bearer <token>
  - Protege rutas que requieren autenticaci√≥n
  - Decodifica el token y agrega info del usuario al request

‚Ä¢ validate-dto.ts:
  - validateDto: Middleware gen√©rico para validar DTOs
  - Usa class-transformer y class-validator
  - Valida autom√°ticamente el body de las peticiones
  - Devuelve errores detallados si la validaci√≥n falla

üìÅ models/
----------
Esquemas de base de datos usando Mongoose.

‚Ä¢ userModel.ts:
  - Define el esquema de usuarios para MongoDB
  - Campos: name, lastName, email (√∫nico), password, age
  - Se conecta con la colecci√≥n "users" en MongoDB

üìÅ routes/
----------
Definici√≥n de endpoints y rutas de la API.

‚Ä¢ userRoutes.ts:
  - POST /api/users - Crear usuario (con validaci√≥n DTO)
  - GET /api/users - Obtener todos los usuarios
  - GET /api/users/:id - Obtener usuario por ID
  - PUT /api/users/:id - Actualizar usuario (con validaci√≥n DTO)
  - DELETE /api/users/:id - Eliminar usuario
  - POST /api/users/login - Login de usuario
  - POST /api/users/refresh-token - Refrescar access token

‚Ä¢ productRoutes.ts:
  - GET /api/products - Obtener productos (protegido con JWT)
  - Usa middleware authenticateJWT para proteger todas las rutas
  - Requiere token v√°lido en header Authorization

FLUJO DE AUTENTICACI√ìN:
=======================

1. REGISTRO:
   - POST /api/users con datos del usuario
   - Se valida con create-user.dto.ts
   - Se hashea la contrase√±a con bcrypt
   - Se guarda en MongoDB

2. LOGIN:
   - POST /api/users/login con email y password
   - Se verifica la contrase√±a hasheada
   - Se generan access token (10 min) y refresh token (7 d√≠as)
   - Se devuelven ambos tokens al cliente

3. ACCESO A RUTAS PROTEGIDAS:
   - Se env√≠a access token en header: Authorization: Bearer <token>
   - El middleware authenticateJWT valida el token
   - Si es v√°lido, permite acceso al endpoint

4. RENOVACI√ìN DE TOKEN:
   - POST /api/users/refresh-token con refresh token
   - Se valida el refresh token
   - Se genera un nuevo access token
   - Se devuelve el nuevo access token

TECNOLOG√çAS USADAS:
===================
- Express.js: Framework web
- TypeScript: Lenguaje tipado
- Mongoose: ODM para MongoDB
- bcrypt: Hash de contrase√±as
- jsonwebtoken: Autenticaci√≥n JWT
- class-validator: Validaci√≥n de datos
- class-transformer: Transformaci√≥n de objetos
- dotenv: Variables de entorno

VARIABLES DE ENTORNO (.env):
============================
- PORT: Puerto del servidor (3000)
- MONGO_URI: URL de conexi√≥n a MongoDB Atlas
- JWT_SECRET: Clave secreta para firmar tokens JWT

SEGURIDAD IMPLEMENTADA:
=======================
- Contrase√±as hasheadas con bcrypt
- Autenticaci√≥n JWT con tokens de corta duraci√≥n
- Validaci√≥n de datos con DTOs
- Protecci√≥n de rutas sensibles
- Manejo de errores y validaciones

PR√ìXIMOS PASOS POSIBLES:
========================
- Agregar modelo de productos en MongoDB
- Implementar CRUD completo para productos
- Agregar validaciones m√°s espec√≠ficas
- Implementar roles y permisos
- Agregar logging y monitoreo
- Documentaci√≥n con Swagger